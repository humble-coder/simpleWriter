{
  "name": "node-rsa",
  "version": "0.1.53",
  "description": "Node.js RSA library",
  "main": "src/NodeRSA.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rzcoder/node-rsa.git"
  },
  "keywords": [
    "node",
    "rsa",
    "crypto",
    "assymetric",
    "encryption",
    "decryption",
    "sign",
    "verify"
  ],
  "author": {
    "name": "rzcoder"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/rzcoder/node-rsa/issues"
  },
  "homepage": "https://github.com/rzcoder/node-rsa",
  "devDependencies": {
    "grunt": "^0.4.4",
    "grunt-simple-mocha": "^0.4.0",
    "jit-grunt": "^0.3.2",
    "chai": "^1.9.1",
    "grunt-contrib-jshint": "^0.9.2"
  },
  "dependencies": {
    "lodash": "^2.4.1",
    "asn1": "^0.2.0"
  },
  "readme": "# Node-RSA\n\nNode.js RSA library<br/>\nBased on jsbn library from Tom Wu http://www-cs-students.stanford.edu/~tjw/jsbn/\n\n* Pure JavaScript\n* No needed OpenSSL\n* Generating keys\n* Supports long messages for encrypt/decrypt\n* Signing and verifying\n \n\n## Example\n\n```javascript\nvar NodeRSA = require('node-rsa');\nvar key = new NodeRSA({b: 512});\n\nvar text = 'Hello RSA!';\nvar encrypted = key.encrypt(text, 'base64');\nconsole.log('encrypted: ', encrypted);\nvar decrypted = key.decrypt(encrypted, 'utf8');\nconsole.log('decrypted: ', decrypted);\n```\n\n\n## Installing\n\n```shell\nnpm install node-rsa\n```\n\n### Testing\n\n```shell\nnpm test\n```\n\n## Work environment\n\nThis library developed and tested primary for Node.js, but it still can work in browsers with [browserify](http://browserify.org/).\n\n## Usage\n\n### Create instance\n```javascript\nvar NodeRSA = require('node-rsa');\n\nvar key = new NodeRSA([key], [options]);\n```\n**key** - parameters of a generated key or the key in PEM format.<br/>\n**options** - additional settings\n * **environment** - working environment, `'browser'` or `'node'`. Default autodetect.\n * **signingAlgorithm** - hash algorithm used for signing and verifying. Can be `'sha1'`, `'sha256'`, `'md5'`. Default `'sha256'`.\n\n#### \"Empty\" key\n```javascript\nvar key = new NodeRSA();\n```\n\n### Generate new key 512bit-length and with public exponent 65537\n```javascript\nvar key = new NodeRSA({b: 512});\n```\n\n### Load key from PEM string\n\n```javascript\nvar key = new NodeRSA('-----BEGIN RSA PRIVATE KEY-----\\n'+\n                      'MIIBOQIBAAJAVY6quuzCwyOWzymJ7C4zXjeV/232wt2ZgJZ1kHzjI73wnhQ3WQcL\\n'+\n                      'DFCSoi2lPUW8/zspk0qWvPdtp6Jg5Lu7hwIDAQABAkBEws9mQahZ6r1mq2zEm3D/\\n'+\n                      'VM9BpV//xtd6p/G+eRCYBT2qshGx42ucdgZCYJptFoW+HEx/jtzWe74yK6jGIkWJ\\n'+\n                      'AiEAoNAMsPqwWwTyjDZCo9iKvfIQvd3MWnmtFmjiHoPtjx0CIQCIMypAEEkZuQUi\\n'+\n                      'pMoreJrOlLJWdc0bfhzNAJjxsTv/8wIgQG0ZqI3GubBxu9rBOAM5EoA4VNjXVigJ\\n'+\n                      'QEEk1jTkp8ECIQCHhsoq90mWM/p9L5cQzLDWkTYoPI49Ji+Iemi2T5MRqwIgQl07\\n'+\n                      'Es+KCn25OKXR/FJ5fu6A6A+MptABL3r8SEjlpLc=\\n'+\n                      '-----END RSA PRIVATE KEY-----');\n```\n\nAlso you can use next methods:\n\n```javascript\nkey.generateKeyPair([bits], [exp]);\nkey.loadFromPEM(pem_string);\n```\n**bits** - key size in bits. 2048 by default.  \n**exp** - public exponent. 65537 by default.\n\n### Export keys\n```javascript\nkey.getPrivatePEM();\nkey.getPublicPEM();\n```\n\n### Properties\n\n#### Key testing\n```javascript\nkey.isPrivate();\nkey.isPublic([strict]);\n```\n**strict** - if true method will return false if key pair have private exponent. Default `false`.\n\n#### Key info\n```javascript\nkey.getKeySize();\n```\nReturn key size in bits.\n\n```javascript\nkey.getMaxMessageSize();\n```\nReturn max data size for encrypt in bytes.\n\n### Encrypting/decrypting\n\n```javascript\nkey.encrypt(buffer, [encoding], [source_encoding]);\n```\nReturn encrypted data.<br/>\n**buffer** - data for encrypting, may be string, Buffer, or any object/array. Arrays and objects will encoded to JSON string first.<br/>\n**encoding** - encoding for output result, may be `'buffer'`, `'binary'`, `'hex'` or `'base64'`. Default `'buffer'`.<br/>\n**source_encoding** - source encoding, works only with string buffer. Can take standard Node.js Buffer encodings (hex, utf8, base64, etc). `'utf8'` by default.<br/>\n\n```javascript\nkey.decrypt(buffer, [encoding]);\n```\nReturn decrypted data.<br/>\n**buffer** - data for decrypting. Takes Buffer object or base64 encoded string.<br/>\n**encoding** - encoding for result string. Can also take `'buffer'` for raw Buffer object, or `'json'` for automatic JSON.parse result. Default `'buffer'`.\n\n### Signing/Verifying\n```javascript\nkey.sign(buffer, [encoding], [source_encoding]);\n```\nReturn signature for buffer. All the arguments are the same as for `encrypt` method.\n\n```javascript\nkey.verify(buffer, signature, [source_encoding], [signature_encoding])\n```\nReturn result of check, `true` or `false`.<br/>\n**buffer** - data for check, same as `encrypt` method.<br/>\n**signature** - signature for check, result of `sign` method.<br/>\n**source_encoding** - same as for `encrypt` method.<br/>\n**signature_encoding** - encoding of given signature. May be `'buffer'`, `'binary'`, `'hex'` or `'base64'`. Default `'buffer'`.\n\n## Contributing\n\nQuestions, comments, bug reports, and pull requests are all welcome.\n\n## Changelog\n\n### 0.1.50\n * Implemented native js signing and verifying for browsers\n * `options.signingAlgorithm` now takes only hash-algorithm name\n * Added `.getKeySize()` and `.getMaxMessageSize()` methods\n * `.loadFromPublicPEM` and `.loadFromPrivatePEM` methods marked as private\n\n### 0.1.40\n * Added signing/verifying\n\n### 0.1.30\n * Added long message support\n\n\n## License for NodeRSA.js\n\nCopyright (c) 2014  rzcoder<br/>\nAll Rights Reserved.\n\nBSD\n\n## Licensing for code used in rsa.js and jsbn.js\n\nCopyright (c) 2003-2005  Tom Wu<br/>\nAll Rights Reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,\nEXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n\nIN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\nINDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\nRESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\nTHE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nIn addition, the following condition applies:\n\nAll redistributions must retain an intact copy of this copyright notice\nand disclaimer.\n",
  "readmeFilename": "README.md",
  "_id": "node-rsa@0.1.53",
  "dist": {
    "shasum": "4ac06943f6480d53c12b0fe39ef2e65f4f3e8a94"
  },
  "_from": "node-rsa@",
  "_resolved": "https://registry.npmjs.org/node-rsa/-/node-rsa-0.1.53.tgz"
}
